" BEGIN VUNDLE----------------------------------------------------------------
set nocompatible              " be iMproved, required
filetype off                  " required

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')

" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'

" The following are examples of different formats supported.
" Keep Plugin commands between vundle#begin/end.
" plugin on GitHub repo
"Plugin 'tpope/vim-fugitive'
" plugin from http://vim-scripts.org/vim/scripts.html
" Plugin 'L9'
" Git plugin not hosted on GitHub
"Plugin 'git://git.wincent.com/command-t.git'
" git repos on your local machine (i.e. when working on your own plugin)
"Plugin 'file:///home/gmarik/path/to/plugin'
" The sparkup vim script is in a subdirectory of this repo called vim.
" Pass the path to set the runtimepath properly.
"Plugin 'rstacruz/sparkup', {'rtp': 'vim/'}
" Install L9 and avoid a Naming conflict if you've already installed a
" different version somewhere else.
" Plugin 'ascenator/L9', {'name': 'newL9'}

" Allow Ctl + direction (hjkl) to switch panes between vim & tmux
Plugin 'christoomey/vim-tmux-navigator'
" surround is for chaning quotes and brackets and such
Plugin 'tpope/vim-surround'
" repeat makes the . command work for surround commands
Plugin 'tpope/vim-repeat'
" Handy rails stuff
Plugin 'tpope/vim-rails'
" Activate parts of vim-rails in other ruby projects
Plugin 'tpope/vim-rake'
" Fancy bundler stuff
Plugin 'tpope/vim-bundler'
" Lets vim-rails run tests in the background
Plugin 'tpope/vim-dispatch'
" Liquid files for shopify stuff
Plugin 'tpope/vim-liquid'
" Various markup languages
Plugin 'tpope/vim-ragtag'
" Handlebars templates
Plugin 'mustache/vim-mustache-handlebars'
" Auto-complete with tab
" Plugin 'ervandew/supertab'
" Testing a differnt autocomple thing
Plugin 'zxqfl/tabnine-vim'

" Fancy status lines
Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'
let g:airline_powerline_fonts = 1
let g:airline_theme='jellybeans'

" Git info in the powerline and git commands like :Gblame
Plugin 'tpope/vim-fugitive'

" Git modification info in the gutters
Plugin 'airblade/vim-gitgutter'
set updatetime=750 " ensures that line markers show up relatively quickly
let g:gitgutter_terminal_reports_focus=0
set signcolumn=yes " always show the column for git line changes

" Syntax checker
Plugin 'vim-syntastic/syntastic'

" Help vim be able to see file changes
Plugin 'wincent/terminus'

" Automatically add end lines to if statements and what not
Plugin 'tpope/vim-endwise'

" Commenting fun
Plugin 'scrooloose/nerdcommenter'

" Preview colors in csss
Plugin 'ap/vim-css-color'

" Ability to run some unix commands from inside vim, mostly for moving,
" deleting, chmoding files and what not.
Plugin 'tpope/vim-eunuch'

" Keep aware of trailing whitespace
Plugin 'bronson/vim-trailing-whitespace'

" A color scheme
Plugin 'nanotech/jellybeans.vim'

" Helps vim keep up when switching from tmux panes
Plugin 'tmux-plugins/vim-tmux-focus-events'

" Helps the current vim split be more noticable
Plugin 'blueyed/vim-diminactive'

" Focus the current paragraph
Plugin 'junegunn/limelight.vim'
let g:limelight_conceal_ctermfg = 245
" This line can turn on limelight automatically, but I'm not so sure about it
"autocmd VimEnter * Limelight

" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required
" To ignore plugin indent changes, instead use:
"filetype plugin on
"
" Brief help
" :PluginList       - lists configured plugins
" :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate
" :PluginSearch foo - searches for foo; append `!` to refresh local cache
" :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal
"
" see :h vundle for more details or wiki for FAQ
" Put your non-Plugin stuff after this line
" END VUNDLE----------------------------------------------------------------
"
" Much of the remaining comes from : https://dougblack.io/words/a-good-vimrc.html
" Enable syntax highlighting
syntax on

" Leader {{{
" Map the leader key to ,
let mapleader = ","
" }}}

" UI Config {{{
colorscheme jellybeans
" Sets a lighter background for non-focused vim splits with viminactive
hi ColorColumn ctermbg=236
set cursorline          " highlight current line
hi CursorLine   cterm=none ctermbg=234 ctermfg=NONE guibg=black gui=none
set wildmenu            " visual autocomplete for command menu
set lazyredraw          " redraw only when we need to.
set showmatch           " highlight matching [{()}]
set encoding=UTF-8
set ttyfast
set splitbelow
set splitright
set nowrap
" Can't tell if these do any good....
"set timeoutlen=1000
"set ttimeoutlen=0
" }}}

" Searching {{{
set incsearch           " search as characters are entered
set hlsearch            " highlight matches
" turn off search highlight by doing ,<space>
nnoremap <leader><space> :nohlsearch<CR>
" These two lines make it so that an all lowercase search is case insensitive,
" but a search containing a capital letter with be case sensitive.
set ignorecase
set smartcase
set grepprg=ag\ --nogroup\ --nocolor
" bind K to grep word under cursor
nnoremap K :grep! "\b<C-R><C-W>\b"<CR>:cw<CR>
" The following requies: brew install fzy
function! FzyCommand(choice_command, vim_command)
  try
    let output = system(a:choice_command . " | fzy ")
  catch /Vim:Interrupt/
    " Swallow errors from ^C, allow redraw! below
  endtry
  redraw!
  if v:shell_error == 0 && !empty(output)
    exec a:vim_command . ' ' . output
  endif
endfunction
nnoremap <c-p> :call FzyCommand("ag . --silent -l -g ''", ":e")<cr> " Mimic ctrl-p
nnoremap <leader>e :call FzyCommand("ag . --silent -l -g ''", ":e")<cr>
nnoremap <leader>v :call FzyCommand("ag . --silent -l -g ''", ":vs")<cr>
nnoremap <leader>s :call FzyCommand("ag . --silent -l -g ''", ":sp")<cr>
" }}}

" Folding {{{
set foldlevelstart=10   " open most folds by default
set foldnestmax=10      " 10 nested fold max
" space open/closes folds
nnoremap <space> za
set foldmethod=indent   " fold based on indent level
" }}}

" Movement {{{
" move to beginning/end of line
nnoremap B ^
nnoremap E $
" highlight last inserted text
nnoremap gV `[v`]
" }}}

" Shortcuts {{{
" jk is escape
inoremap jk <esc>
" }}}

" Tmux {{{
" allows cursor change in tmux mode
if exists('$TMUX')
    let &t_SI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=1\x7\<Esc>\\"
    let &t_EI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=0\x7\<Esc>\\"
else
    let &t_SI = "\<Esc>]50;CursorShape=1\x7"
    let &t_EI = "\<Esc>]50;CursorShape=0\x7"
endif
" Clipboard
" Allows yanking into the system clipboard?
set clipboard=unnamed
" }}}

" Line Number {{{
set number
" }}}

" Test running {{{
" Vim functions to run RSpec and Cucumber on the current file and optionally on
" the spec/scenario under the cursor.

function! RailsScriptIfExists(name)
  " Bundle exec
  if isdirectory(".bundle") || (exists("b:rails_root") && isdirectory(b:rails_root . "/.bundle"))
    return "bundle exec " . a:name
  " System Binary
  else
    return a:name
  end
endfunction

function! RunRake(args)
  let rake = RailsScriptIfExists("rake")
  let cmd = rake
  execute ":! echo " . cmd . " && " . cmd
endfunction

map <Leader>ra :call RunRake("")<CR>

" These next few are shotrcuts to functions provided by rails.vim
" Tries to run a single test for the current line
map <Leader>t :.Rails<CR>
" Runs the entire test file for the current file
map <Leader>T :Rails<CR>
" 'rs' == 'rails spec' == run rspec
map <Leader>rs :Make spec<CR>
" 'rs = 'rails cucumber' == run cucumber
map <Leader>rc :Make cucumber<CR>

" }}}

" File reloading {{{
set autoread
" Triger `autoread` when files changes on disk
" https://unix.stackexchange.com/questions/149209/refresh-changed-content-of-file-opened-in-vim/383044#383044
" https://vi.stackexchange.com/questions/13692/prevent-focusgained-autocmd-running-in-command-line-editing-mode
autocmd FocusGained,BufEnter,CursorHold,CursorHoldI * if mode() != 'c' | checktime | endif
" Notification after file change
" https://vi.stackexchange.com/questions/13091/autocmd-event-for-autoread
autocmd FileChangedShellPost *
  \ echohl WarningMsg | echo "File changed on disk. Buffer reloaded." | echohl None
" }}}

" Syntastic config {{{
" https://github.com/vim-syntastic/syntastic#3-recommended-settings
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 0
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0

" Added these because indenting in HTML and a few other random things was
" acting weird. There's probably a better way to address that, but this was
" quick and easy and did the trick.
set expandtab " Insert spaces instead of tabs
set smarttab " forces use of shiftwidth and tabstop
set shiftwidth=2 " Change the number of spaces inserted for indentation
set tabstop=2 " Tabs insert 4 spaces

" }}}
" To investigate:
"
" vimux - run commands directly in vim into a tmux pane :
" https://www.bugsnag.com/blog/tmux-and-vim
" https://github.com/benmills/vimux
"
" Motions for Ruby blocks
" https://github.com/nelstrom/vim-textobj-rubyblock
"
" Multiple cursors - edit multiple lines at a time
" https://github.com/terryma/vim-multiple-cursors
"
" Vim sensible - would this be helpful?
" https://github.com/tpope/vim-sensible
"
" Plugin for running ruby tests - Seems like rails.vim may do some/most of this?
" https://github.com/skalnik/vim-vroom
"
" Another testing plugin
" https://github.com/janko/vim-test
"
" And yet another
" https://github.com/thoughtbot/vim-rspec
"
" Ruby refactoring
" https://github.com/ecomba/vim-ruby-refactoring
"
" Tools for working on tmux.conf
" https://github.com/tmux-plugins/vim-tmux
"
"
" Are there other good things I could pull from these?
" https://c7.se/switching-to-vundle/
" https://vim.spf13.com
"
"
"
" modeline to allow folding by marked section
" vim:foldmethod=marker:foldlevel=0
